@using Microsoft.AspNetCore.Components;
@using OpenTraumaRegistry.Client
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (refTables != null)
{
    <MatNavMenu Multi="true" Class="app-sidebar">
        <MatNavItem Href="@NavigationManager.ToAbsoluteUri(" ").AbsoluteUri">
            <MatIcon>home</MatIcon> <span class="miniHover">Home page</span>
        </MatNavItem>
        <MatNavItem Href="@NavigationManager.ToAbsoluteUri("Patients").AbsoluteUri">
            <MatIcon>people</MatIcon> <span class="miniHover">Patients</span>
        </MatNavItem>
        <MatNavItem Href="@NavigationManager.ToAbsoluteUri("setup").AbsoluteUri">
            <MatIcon>build</MatIcon> <span class="miniHover">Setup</span>
        </MatNavItem>
        <MatNavSubMenu>
            <MatNavSubMenuHeader>
                <MatNavItem AllowSelection="false">
                    <MatIcon>settings</MatIcon><span class="miniHover">System Tables</span>
                </MatNavItem>
            </MatNavSubMenuHeader>
            <MatNavSubMenuList>
                @foreach (var item in refTables)
                {
                    var local_Table = item;

                    <MatNavItem Href="@NavigationManager.ToAbsoluteUri("referencetables/"+local_Table.Code).AbsoluteUri">
                        <MatIcon>settings</MatIcon> <span class="miniHover">@item.Description</span>
                    </MatNavItem>
                }
            </MatNavSubMenuList>
        </MatNavSubMenu>

    </MatNavMenu>
}
@code {
    public bool IsLoggedIn = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }



    ReferenceTableClient client = new ReferenceTableClient();
    ICollection<ReferenceTables> refTables = null;


    protected override async Task OnInitializedAsync()
    {
        //var setupClient = new SetupClient();
        //bool IsDatabaseConfigured = false;


        //if (!NavigationManager.Uri.Contains("/setup"))
        //{
        //    bool.TryParse(await setupClient.IsDatabaseConfiguredAsync(), out IsDatabaseConfigured);
        //    if (IsDatabaseConfigured)
        //    {

        //        refTables = await client.GetRefTableListAsync();

        //        if (refTables == null)
        //        {
        //            NavigationManager.NavigateTo("/setup");
        //        }
        //    }
        //    else
        //    {
        //        NavigationManager.NavigateTo("/setup");
        //    }
        //}

    }

    async Task LoadMenu()
    {
        refTables = await client.GetRefTableListAsync();
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            if (!NavigationManager.Uri.Contains("/login"))
            {
                var token = await localStorage.GetItemAsync<string>("OpenTraumaRegistry_Token");
                if (string.IsNullOrEmpty(token))
                {
                    NavigationManager.NavigateTo("/login");
                }
                client.SetBearerToken(token);
                await LoadMenu();
            }
        }
    }


    protected async Task ViewTable(string tableName)
    {
        NavigationManager.NavigateTo("/referencetables/" + tableName);
    }




    protected override async Task OnParametersSetAsync()
    {
        IsLoggedIn = false;
        //var user = (await authenticationStateTask).User;

        //if (user.Identity.IsAuthenticated)
        //{
        //    IsLoggedIn = true;
        //}

        //https://gist.github.com/SteveSandersonMS/175a08dcdccb384a52ba760122cd2eda Examples
        //if (user.IsInRole("Admin"))
        //{
        // Perform some action only available to users in the 'admin' role
        //}
    }


}