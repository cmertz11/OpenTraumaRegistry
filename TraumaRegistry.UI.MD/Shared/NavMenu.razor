@using Microsoft.AspNetCore.Components;
@using OpenTraumaRegistry.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@*@inject Blazored.LocalStorage.ILocalStorageService localStorage*@

@if (refTables != null)
{
    <MatNavMenu Multi="true" Class="app-sidebar">
        <MatNavItem Href="@NavigationManager.ToAbsoluteUri(" ").AbsoluteUri">
            <MatIcon>home</MatIcon> <span class="miniHover">Home page</span>
        </MatNavItem>
        <MatNavItem Href="@NavigationManager.ToAbsoluteUri("Patients").AbsoluteUri">
            <MatIcon>people</MatIcon> <span class="miniHover">Patients</span>
        </MatNavItem>
        @*<MatNavItem Href="@NavigationManager.ToAbsoluteUri("setup").AbsoluteUri">
                <MatIcon>build</MatIcon> <span class="miniHover">Setup</span>
            </MatNavItem>*@


        @{ if (IsSystemAdministrator)
            {

                <MatNavItem Href="@NavigationManager.ToAbsoluteUri("Users").AbsoluteUri">
                    <MatIcon>people</MatIcon> <span class="miniHover">Users</span>
                </MatNavItem>

                <MatNavSubMenu>


                    <MatNavSubMenuHeader>
                        <MatNavItem AllowSelection="false">
                            <MatIcon>settings</MatIcon><span class="miniHover">System Tables</span>
                        </MatNavItem>
                    </MatNavSubMenuHeader>

                    <MatNavSubMenuList>
                        @foreach (var item in refTables)
                        {
                            var local_Table = item;

                            <MatNavItem Href="@NavigationManager.ToAbsoluteUri("referencetables/" + local_Table.Code).AbsoluteUri">
                                <MatIcon>settings</MatIcon> <span class="miniHover">@item.Description</span>
                            </MatNavItem>
                        }
                    </MatNavSubMenuList>

                </MatNavSubMenu>
            }
        }

    </MatNavMenu>
}


@code {
    public bool Authenticated = false;
    public bool IsSystemAdministrator = false;

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    ReferenceTableClient client = new ReferenceTableClient();
    ICollection<ReferenceTables>
        refTables = null;


    protected override async Task OnInitializedAsync()
    {
        refTables = await client.GetRefTableListAsync();
    }

    async Task LoadMenu()
    {
        refTables = await client.GetRefTableListAsync();
        this.StateHasChanged();
    }




    protected async Task ViewTable(string tableName)
    {
        NavigationManager.NavigateTo("/referencetables/" + tableName);
    }




    protected override async Task OnParametersSetAsync()
    {
        Authenticated = false;
        var user = (await authenticationStateTask).User;

        try
        {
            var role = user.FindFirst(c => c.Type == "SystemAdministrator");

            if(role != null)
            Boolean.TryParse(role.Value, out IsSystemAdministrator);

       
        }
        catch { }

        if (user.Identity.IsAuthenticated)
        {
            Authenticated = user.Identity.IsAuthenticated;
            this.StateHasChanged();
        }
    }


}
