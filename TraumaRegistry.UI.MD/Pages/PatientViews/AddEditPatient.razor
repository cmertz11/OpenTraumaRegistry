@page "/addeditpatient"
@page "/addeditpatient/{Id:int}"

@inject NavigationManager NavigationManager
@inject IMatToaster Toaster


<h3>@pageHeader</h3>
<EditForm Model="@patient" OnValidSubmit="@validateForm">
    <DataAnnotationsValidator /> 
    <p>
        <MatTextField id="patientMRN"  Label="Medical Record Number" @bind-Value=@patient.Mrn />
    </p>
    <p>
        <MatTextField id="patientFirstName"  Label="First Name" @bind-Value=@patient.FirstName />

        <ValidationMessage For="@(() => patient.FirstName)" />
    </p>
    <p>
        <MatTextField id="patientLastName"   Label="Last Name" @bind-Value=@patient.LastName />
        <ValidationMessage For="@(() => patient.LastName)" />
    </p>
    <p>
        <MatTextField id="patientMI" Outlined="true" Label="Middle Initial" @bind-Value=@patient.Mi />
    </p>
    <p>
        <MatDatePicker Label="DOB" Dense="true" Outlined="true" @bind-Value="@patient.Dob"></MatDatePicker>
    </p>
    <p>
        <RefTableDropDown TableName="RefGender" PlaceHolder="Gender" SelectedId="@patient.GenderReferenceId" IdChanged="genderIdChanged"></RefTableDropDown>
    </p>
    <p>
        <RefTableDropDown TableName="RefRace" PlaceHolder="Race" SelectedId="@patient.RaceReferenceId" IdChanged="raceIdChanged"></RefTableDropDown>
    </p>
    <p>
        <MatTextField id="patientEmail" Outlined="true" Label="E-mail" @bind-Value=@patient.Email /> <br />
        <ValidationMessage For="@(() => patient.Email)" />
    </p>
    <MatButton Icon="cancel" @onclick="@cancel">Cancel</MatButton>
    <MatButton type="submit" Icon="save" >Save</MatButton>
</EditForm>
@code {

    [Parameter]
    public int Id { get; set; }

    int genderId;
    int raceId;
    Patient patient = new Patient();
    bool success = false;
    string mode = "add";
    string pageHeader = "Add Patient";
    PatientsClient client = new PatientsClient();

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            mode = "edit";
            pageHeader = "Edit Patient: " + Id;
            patient = await client.GetPatientAsync(Id);
            genderId = patient.GenderReferenceId;
            raceId = patient.RaceReferenceId;
        }
        else
        {
            mode = "add";
            pageHeader = "Add New Patient";
        }
    }

    void cancel()
    {
        NavigationManager.NavigateTo("/patients");
    }

    void genderIdChanged(int Id)
    {

        genderId = Id;
    }

    void raceIdChanged(int Id)
    {
        raceId = Id;
    }

    async Task savePatient()
    {
        try
        {
            PatientsClient client = new PatientsClient();
            patient.GenderReferenceId = genderId;
            patient.RaceReferenceId = raceId;

            var timeStamp = System.DateTime.Now;
            patient.LastUpdate = timeStamp;

            if (mode == "add")
            {

                patient.Created = timeStamp;
                var rec = client.PostPatientAsync(patient);
                Toaster.Add("Patient Added Successfully!", MatToastType.Success, "Success", null, null);
            }
            else
            {
                var rec = await client.PutPatientAsync(Id, patient);
                Toaster.Add("Patient Updated Successfully!", MatToastType.Success, "Success", null, null);
            }
        }
        catch (Exception ex)
        {
            Toaster.Add(ex.ToString(), MatToastType.Danger, "Error", null, null);
        }
    }

    private void validateForm()
    {
        savePatient();
    }
}
