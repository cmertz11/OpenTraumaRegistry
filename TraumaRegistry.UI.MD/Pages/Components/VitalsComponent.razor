@inject IMatToaster Toaster

<div class="row">
    <div class="col-10">
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>
                        Systolic
                    </th>
                    <th>
                        Diastolic
                    </th>
                    <th>
                        Pulse
                    </th>
                    <th>
                        Resp Rate
                    </th>
                    <th>
                        SPO2
                    </th>
                    <th>
                        Temp
                    </th>
                    <th>
                        Height
                    </th>
                    <th>
                        Weight
                    </th>
                    <th>
                        Time Taken
                    </th>
                    <th>
                        <MatButton style="float: right;" OnClick="@AddVitals" Icon="add">Add New</MatButton>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (vitals != null)
                {
                    @foreach (var rec in vitals)
                    {
                        <tr>
                            <td>@rec.Systolic</td>
                            <td>@rec.Diastolic</td>
                            <td>@rec.Pulse</td>
                            <td>@rec.RespiratoryRate</td>
                            <td>@rec.SpO2</td>
                            <td>@rec.Temperature</td>
                            <td>@rec.Height</td>
                            <td>@rec.Weight</td>
                            <td>@rec.TimeTaken</td>
                            <td>
                                <MatButton Icon="edit" @onclick="@(() => EditVitals(rec.Id))">Edit</MatButton>
                                <MatButton Icon="delete" @onclick="@(() => DeleteVitals(rec.Id))">Delete </MatButton>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
@if (vitalsObj != null)
{
<MatDialog @bind-IsOpen="@vitalsDiagOpen">
    <MatDialogTitle>@vitalsDiagHeader</MatDialogTitle>

    <MatDialogContent>

        <MatNumericUpDownField Label="Systolic"
                               @bind-Value=@vitalsObj.Systolic
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="Diastolic"
                               @bind-Value=@vitalsObj.Diastolic
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="Pulse"
                               @bind-Value=@vitalsObj.Pulse
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="Resp Rate"
                               @bind-Value=@vitalsObj.RespiratoryRate
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="SPO2"
                               @bind-Value=@vitalsObj.SpO2
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="Temp"
                               @bind-Value=@vitalsObj.Temperature
                               DecimalPlaces=1
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="Height"
                               @bind-Value=@vitalsObj.Height
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>

        <MatNumericUpDownField Label="Weight"
                               @bind-Value=@vitalsObj.Weight
                               DecimalPlaces=0
                               Minimum=null Maximum=null>
        </MatNumericUpDownField>
        <MatDatePicker Label="Time Taken" EnableTime="true" FullWidth="true" @bind-Value="@vitalsObj.TimeTaken"></MatDatePicker>
    </MatDialogContent>

    <MatDialogActions>
        <MatButton Icon="cancel" OnClick="@(e => { vitalsDiagOpen = false; })">Cancel</MatButton>
        <MatButton Icon="save" OnClick="@SaveVitals">Save</MatButton>
        <MatButton Icon="save" OnClick="@SaveVitalsAndClose">Save & Close</MatButton>
    </MatDialogActions>
</MatDialog>
}
@code {
    [Parameter]
    public ICollection<Vitals> vitals { get; set; }

    [Parameter]
    public int eventId { get; set; }

    VitalsClient vitalsClient = new VitalsClient();

    Vitals vitalsObj { get; set; }
    string vitalsMode = "add";
    bool vitalsDiagOpen = false;
    string vitalsDiagHeader = "";

    void AddVitals()
    {
        vitalsObj = new Vitals() { EventId = eventId };
        vitalsMode = "add";
        vitalsDiagOpen = true;
    }

    void EditVitals(int VitalsId)
    {
        vitalsDiagHeader = "Edit Vitals";
        vitalsMode = "edit";
        vitalsObj = vitals.Where(v => v.Id == VitalsId).FirstOrDefault();

        vitalsDiagOpen = true;
    }

    async Task DeleteVitals(int vitalsId)
    {
        var rec = vitals.Where(v => v.Id == vitalsId).FirstOrDefault();
        vitals.Remove(rec);
        await vitalsClient.DeleteVitalsAsync(vitalsId);
    }

    async Task SaveVitalsAndClose()
    {
        await SaveVitals();
        vitalsDiagOpen = false;
    }

    async Task SaveVitals()
    {
        try
        {
            if (vitalsMode == "add")
            {
                vitals.Add(vitalsObj);
                await vitalsClient.PostVitalsAsync(vitalsObj);
            }
            else
            {
                vitals.Remove(vitalsObj);
                vitals.Add(vitalsObj);
                foreach (var item in vitals)
                {
                    await vitalsClient.PutVitalsAsync(item.Id, item);
                }
            }
            Toaster.Add("Vitals Record updated successfully", MatToastType.Success, "Success", null, null);
        }
        catch (Exception ex)
        {
            Toaster.Add(ex.ToString(), MatToastType.Danger, "Error Saving Vitals Record.", null, null);
        }
    }
}
