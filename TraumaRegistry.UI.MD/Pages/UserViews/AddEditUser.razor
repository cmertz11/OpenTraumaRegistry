@page "/addedituser"
@page "/addedituser/{email}"
@using System.ComponentModel.DataAnnotations
@using OpenTraumaRegistry.Shared
@using OpenTraumaRegistry.UI.MD.ValidationModels
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEmailHelper emailClient
@inject IMatToaster Toaster
@inject ISecurity security

<AuthorizeView Context="AuthorizedContext" Policy="SystemAdminstrator">
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-4">
                    <h3><MatIcon>people</MatIcon>@pageHeader</h3>

                    <EditForm Model="@userValidated" OnValidSubmit="@validateForm">
                        <DataAnnotationsValidator />
                        <p>
                            <MatTextField id="patientEmail" Label="E-mail" Disabled="@IsEmailDisabled" FullWidth="true" @bind-Value=@userValidated.EmailAddress />
                            <ValidationMessage For="@(() => userValidated.EmailAddress)" />
                        </p>

                            @if (security.Mode() == "DEVELOPMENT")
                            {
                                <p>
                                    <MatTextField id="password" Label="Password" FullWidth="true" @bind-Value=@userValidated.Password Required="true" Type="password"/>
                                    <ValidationMessage For="@(() => userValidated.Password)" />
                                </p>
                                <p>
                                    <MatTextField id="passwordConfirm" Label="Confirm Password" FullWidth="true" @bind-Value=@userValidated.PasswordConfirm Required="true" Type="password" />
                                    <ValidationMessage For="@(() => userValidated.PasswordConfirm)" />
                                </p>
                            }

                        <p>
                            <MatTextField id="patientFirstName" Label="First Name" FullWidth="true" @bind-Value=@userValidated.FirstName />
                            <ValidationMessage For="@(() => userValidated.FirstName)" />
                        </p>
                        <p>
                            <MatTextField id="patientLastName" Label="Last Name" FullWidth="true" @bind-Value=@userValidated.LastName />
                            <ValidationMessage For="@(() => userValidated.LastName)" />
                        </p>
                        <p>
                            <MatTextField id="patientCellPhone" Label="Cell Phone:" FullWidth="true" @bind-Value=@userValidated.CellPhone />
                            <ValidationMessage For="@(() => userValidated.CellPhone)" />
                        </p>
                        <p>
                            <MatTextField id="patientOfficePhone" Label="Office Phone:" FullWidth="true" @bind-Value=@userValidated.OfficePhone />
                            <ValidationMessage For="@(() => userValidated.OfficePhone)" />
                        </p>
                        <p>
                            <MatCheckbox @bind-Value=@userValidated.SystemAdministrator Label="System Administrator"></MatCheckbox>
                        </p>

                        <MatButton type="submit" Icon="save">Save</MatButton>
                    </EditForm>
                    @*<MatButton type="submit" Icon="save" @onclick="@(() => saveUser())">Save</MatButton>*@
                    <MatButton Icon="cancel" @onclick="@(() => cancel())">Cancel</MatButton>
                </div>
            </div>
        </div>

        <MatDialog @bind-IsOpen="@emailValidated.VerifyEmailModalOpen">
            <MatDialogTitle> Enter unique Email Address</MatDialogTitle>
            <MatDialogContent>
                <p>
                    <MatTextField @bind-Value="@emailValidated.NewEmailAddress" OnInput="@OnEmailInputHandler" Label="Email" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    <label>@emailValidated.EmailValidationMessage</label>
                </p>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(() => cancel())">Cancel</MatButton>

                @if (emailValidated.EmailValid)
                {
                    <MatButton @onclick="@(() => SetNewEmail())">Ok</MatButton>
                }
                else
                {
                    if (emailValidated.EmailFormatValid)
                    {
                        <MatButton @onclick="@(() => VerifyEmail())">Verify Email</MatButton>
                    }
                }
            </MatDialogActions>
        </MatDialog>

    </Authorized>
    <NotAuthorized>
        <RedirectToError />
    </NotAuthorized>

</AuthorizeView>

@code {
    [Parameter]
    public string email { get; set; } = "";

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    _dtoUser user = new _dtoUser();
    v_User userValidated = new v_User();
    v_Email emailValidated = new v_Email();

    ObjectMapper mapper = new ObjectMapper();

    bool success = false;
    string mode = "add";
    string pageHeader = "Add Patient";

    bool IsEmailDisabled = true;

    UsersClient client = new UsersClient();
    AccountClient accountClient = new AccountClient();


    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(email))
        {
            mode = "edit";
            pageHeader = "Edit User";
            user = await client.GetUserByEmailAddressAsync(email);

            userValidated = (v_User)mapper.MapObjects(user, userValidated);
        }
        else
        {
            mode = "add";
            pageHeader = "Add New User";
            emailValidated.VerifyEmailModalOpen = true;
        }
    }

    void cancel()
    {
        NavigationManager.NavigateTo("/Users");
    }

    async Task VerifyEmail()
    {
        emailValidated.EmailValid = await accountClient.ValidateEmailAsync(emailValidated.NewEmailAddress);

        if (emailValidated.EmailValid)
        {
            emailValidated.EmailValidationMessage = "Email Address is Valid.  Click 'OK' to continue.";
        }
        else
        {
            emailValidated.EmailValidationMessage = "Email Address has already been taken.";
        }
    }

    void OnEmailInputHandler(ChangeEventArgs e)
    {
        emailValidated.EmailValid = false;
        emailValidated.EmailValidationMessage = "";
        if (!security.ValidEmailFormat(e.Value.ToString()))
        {
            emailValidated.EmailValidationMessage = "Incorrect Email Address format.";
            emailValidated.EmailFormatValid = false;
        }
        else
        {
            emailValidated.EmailValidationMessage = "Valid Format.";
            emailValidated.EmailFormatValid = true;
        }
    }

    async Task SetNewEmail()
    {
        userValidated.EmailAddress = emailValidated.NewEmailAddress;
        emailValidated.VerifyEmailModalOpen = false;
    }

    async Task saveUser()
    {
        try
        {
            var currentuser = (await authenticationStateTask).User;
            UsersClient userClient = new UsersClient();
            user = (_dtoUser)mapper.MapObjects(userValidated, user);
            var timeStamp = System.DateTime.Now;
            user.LastUpdate = timeStamp;
            user.LastUpdatedBy = Convert.ToInt32(currentuser.FindFirst(c => c.Type == "Id").Value);

            if (mode == "add")
            {

                if (validUser(user))
                {
                    user.EmailConfirmed = false;
                    string tempPassword = "";
                    if(security.Mode() == "DEVELOPMENT")
                    {
                        user.Password = security.Hash(user.Password);
                    }
                    else
                    {
                        tempPassword = security.GenerateRandomPassword();
                        user.Password = security.Hash(tempPassword);
                        user.ForcePasswordReset = true;
                        user.ConfirmationToken = security.GenerateConfirmationToken();
                        user.ConfirmationTokenExpires = DateTime.Now.AddMinutes(security.ConfirmationTokenExpiresMinutes());
                    }

                    user.PasswordExpires = DateTime.Now.AddDays(security.TempPasswordExpiresDays()); //TODO: this should be a setting
                    user.Locked = false;
                  //  user = (_dtoUser)mapper.MapObjects(userValidated, user);
                    var resp = userClient.PostUserAsync(user);


                    if(security.Mode() != "DEVELOPMENT")
                    {
                        EmailObj email = new EmailObj();
                        email.to = user.EmailAddress;

                        var securedToken = security.EncryptTokenObject(user.EmailAddress, user.ConfirmationToken);

                        email.htmlContent = emailClient.GenerateEmailConfirmationRequest(user.FirstName, tempPassword, securedToken); // get host from settings?
                        email.subject = "New Open Trauma Registry Account";
                        await emailClient.SendAsync(email);

                        Toaster.Add("User Added Successfully!  A temporary password has been sent to the email specified.", MatToastType.Success, "Success", null, null);
                    }
                    else
                    {
                        Toaster.Add("User Added Successfully!", MatToastType.Success, "Success", null, null);
                    }

                }
            }
            else
            {
                user = (_dtoUser)mapper.MapObjects(userValidated, user);
                var resp = userClient.PutUserAsync(user.Id, user);
                var msg = $"User {user.EmailAddress} updated successfully.";
                Toaster.Add(msg, MatToastType.Success, "Update Complete", null, null);
            }
        }
        catch (Exception ex)
        {
            Toaster.Add(ex.ToString(), MatToastType.Danger, "Error", null, null);
        }
    }

    protected async Task ResendEmailConfirmation()
    {
        try
        {

            var currentuser = (await authenticationStateTask).User;
            UsersClient userClient = new UsersClient();

            var timeStamp = System.DateTime.Now;
            user.LastUpdate = timeStamp;
            user.LastUpdatedBy = Convert.ToInt32(currentuser.FindFirst(c => c.Type == "Id").Value);
            user.EmailConfirmed = false;
            var tempPassord = security.GenerateRandomPassword();
            user.Password = security.Hash(tempPassord);
            user.PasswordExpires = DateTime.Now.AddDays(security.TempPasswordExpiresDays()); //TODO: this should be a setting
            user.ConfirmationToken = security.GenerateConfirmationToken();
            user.ConfirmationTokenExpires = DateTime.Now.AddMinutes(security.ConfirmationTokenExpiresMinutes());
            user.ForcePasswordReset = true;
            user.Locked = false;

            //_dtoUser dtoUser = new _dtoUser();
            //dtoUser = (_dtoUser)mapper.MapObjects(user, dtoUser);

            var resp = userClient.PutUserAsync(user.Id, user);

            EmailObj email = new EmailObj();
            email.to = user.EmailAddress;

            var securedToken = security.EncryptTokenObject(user.EmailAddress, user.ConfirmationToken);

            email.htmlContent = emailClient.GenerateEmailConfirmationRequest(user.FirstName, tempPassord, securedToken); // get host from settings?
            email.subject = "New Open Trauma Registry Account";
            await emailClient.SendAsync(email);

            Toaster.Add("User Updated!  A new temporary password has been sent to the email specified.", MatToastType.Success, "Success", null, null);

        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private bool validUser(_dtoUser user)
    {
        return true; // TODO:
    }

    private async Task validateForm()
    {
        await saveUser();
    }
}
