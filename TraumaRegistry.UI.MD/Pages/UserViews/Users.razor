@page "/users"
@using System.Diagnostics
@using System.Threading
@using OpenTraumaRegistry.Client;
@using Microsoft.AspNetCore.Components.Authorization
@using OpenTraumaRegistry.Shared
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IEmailHelper emailClient
@inject IMatToaster Toaster
@inject ISecurity security

<AuthorizeView Context="AuthorizedContext" Policy="SystemAdminstrator">

    <Authorized>
        <h2><MatIcon>people</MatIcon> Users</h2>
        <MatProgressBar Indeterminate="@querying"></MatProgressBar>

        @if (pagedData == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="mat-layout-grid mat-layout-grid-align-left">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle mat-layout-grid-cell-span-2">
                        <MatSelect Label="Filter" Enhanced="true" @bind-Value="query.FilterColumn">
                            <MatOptionString value="Id">Id</MatOptionString>
                            <MatOptionString value="FirstName">First Name</MatOptionString>
                            <MatOptionString value="LastName">Last Name</MatOptionString>
                            <MatOptionString value="EmailAddress">Email Address</MatOptionString>
                            <MatOptionString value="Locked">Email Address</MatOptionString>
                            <MatOptionString value="LoginAttempts">Login Attempts</MatOptionString>
                            <MatOptionString value="SytemAdministrator">Is System Administrator</MatOptionString>
                        </MatSelect>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle mat-layout-grid-cell-span-2">
                        <MatTextField id="searchFilter" Label="Search" @bind-Value="query.Filter" />
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle mat-layout-grid-cell-span-1">
                        <MatButton Icon="search" @onclick="SearchAsync">Search </MatButton>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle mat-layout-grid-cell-span-1">
                        <MatSelect Label="Page Size" Enhanced="true" @bind-Value="pageSize">
                            <MatOptionString value="5">5</MatOptionString>
                            <MatOptionString selected="selected" value="10">10</MatOptionString>
                            <MatOptionString value="25">25</MatOptionString>
                            <MatOptionString value="50">50</MatOptionString>
                        </MatSelect>
                    </div>
                </div>
            </div>

            <table class="table table-striped table-hover table-sm">
                <thead>
                    <tr>
                        <th>
                            Id
                            <MatButton Icon="@sortIcon" @onclick="@(() => SetOrderByColumn("Id"))"></MatButton>

                        </th>
                        <th>
                            First Name
                            <MatButton Icon="@sortIcon" @onclick="@(() => SetOrderByColumn("FirstName"))"></MatButton>
                        </th>
                        <th>
                            Last Name
                            <MatButton Icon="@sortIcon" @onclick="@(() => SetOrderByColumn("LastName"))"></MatButton>

                        </th>
                        <th>
                            Email Address
                            <MatButton Icon="@sortIcon" @onclick="@(() => SetOrderByColumn("EmailAddress"))"></MatButton>
                        </th>
                        <th>
                            Login Attempts
                            <MatButton Icon="@sortIcon" @onclick="@(() => SetOrderByColumn("LoginAttempts"))"></MatButton>
                        </th>
                        <th>
                            Is System Administrator
                            <MatButton Icon="@sortIcon" @onclick="@(() => SetOrderByColumn("SystemAdministrator"))"></MatButton>
                        </th>
                        <th></th>
                        <th>
                            <MatButton Style="float: right;" Icon="add" @onclick="@AddNewUser">Add New</MatButton>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in pagedData.Records)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>
                            <td>@user.EmailAddress</td>
                            <td>@user.LoginAttempts</td>
                            <td>@user.SystemAdministrator</td>
                            <td><MatButton Icon="edit" @onclick="@(() => EditUser(user.EmailAddress))">Edit</MatButton></td>
                            <td><MatButton Icon="@(GetLockIcon(user.Locked))" Disabled="@(IsLockDisabled(user.EmailAddress))" @onclick="@(() => ShowLockUserModal(user))">@GetLockLabel(user.Locked)</MatButton></td>
                            @if (!user.EmailConfirmed)
                            {
                                <td><MatButton Icon="email" @onclick="@(() => ResendEmailConfirmation(user))"></MatButton></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            @if (pageCount > 1)
            {
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        @{
                            string previousButtonClass = query.PageNumber == 1 ? "page-item disabled" : "page-item";
                            string nextButtonClass = query.PageNumber == pageCount ? "page-item disabled" : "page-item";

                        }
                        <li class="@previousButtonClass"><a class="page-link" @onclick="@(() => SetPage(Convert.ToInt32(query.PageNumber) - 1))">Previous</a></li>

                        @for (int i = 1; i < pageCount + 1; i++)
                        {
                            var local_i = i;
                            string pageItemClass = query.PageNumber == i ? "page-item active" : "page-item";
                            <li class="@pageItemClass"><a class="page-link" @onclick="@(() => SetPage(local_i))"> @i</a></li>
                        }
                        <li class="@nextButtonClass"><a class="page-link" @onclick="@(() => SetPage(Convert.ToInt32(query.PageNumber) + 1))">Next</a></li>
                    </ul>
                </nav>
            }
            <label>@metrics</label>
        }

        <MatDialog @bind-IsOpen="@lockAccountModal">
            <MatDialogTitle> @(GetLockLabel(accountToLock.Locked)) User Account</MatDialogTitle>
            <MatDialogContent>
                <p>
                    Are you sure you want to @(GetLockLabel(accountToLock.Locked)) User Account?
                    <br /><br />
                    <b>Email:</b> @accountToLock.EmailAddress
                    <br />
                    <b>Name: </b>@accountToLock.FirstName @accountToLock.LastName
                </p>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { lockAccountModal = false; })">Cancel</MatButton>
                <MatButton @onclick="@(() => ToggleLock(accountToLock.EmailAddress))">OK</MatButton>
            </MatDialogActions>
        </MatDialog>

    </Authorized>
    <NotAuthorized>
        <RedirectToError />
    </NotAuthorized>
</AuthorizeView>
@code {

    PagedUserData pagedData;
    UsersPagedClient usersPagedClient = new UsersPagedClient();
    AccountClient accountClient = new AccountClient();

    private readonly ObjectMapper _objectMapper;

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    string sortIcon = "keyboard_arrow_up";
    string metrics = "";
    string pageSize = "10";
    int pageCount = 0;
    bool querying = true;
    string token = "";
    bool lockAccountModal = false;
    User accountToLock = new User();
    string currentUser = "";

    UrlQuery query = new UrlQuery { PageNumber = 1, PageSize = 10, FilterColumn = "LastName", OrderBy = "Id", OrderByDirection = "asc" };

    protected async Task SearchAsync()
    {
        usersPagedClient.SetBearerToken(token);


        Stopwatch sw = new Stopwatch();
        sw.Start();
        pagedData = await usersPagedClient.GetUsersAsync(query);

        pageCount = (pagedData.RecordCount + query.PageSize - 1) / query.PageSize;
        sw.Stop();
        metrics = "Total System Users: " + pagedData.RecordCount + "." + Environment.NewLine + "Data returned in " + sw.ElapsedMilliseconds.ToString() + " Milliseconds";
        querying = false;
        this.StateHasChanged();
    }

    protected void ShowLockUserModal(User userAccountToLock)
    {
        lockAccountModal = true;
        accountToLock = userAccountToLock;
    }

    protected async Task ToggleLock(string EmailAddress)
    {
        lockAccountModal = false;
        await accountClient.ToggleUserAccountLockAsync(EmailAddress);
        await SearchAsync();
    }

    string GetLockIcon(bool userLocked)
    {
        if (userLocked)
        {
            return "lock";
        }
        else
        {
            return "lock_open";
        }
    }

    string GetLockLabel(bool userLocked)
    {
        if (userLocked)
        {
            return "UNLOCK";
        }
        else
        {
            return "LOCK";
        }
    }

    bool IsLockDisabled(string user)
    {
        return (user == currentUser);
    }

    protected async Task ResendEmailConfirmation(User user)
    {
        try
        {

            var currentuser = (await authenticationStateTask).User;
            UsersClient userClient = new UsersClient();

            var timeStamp = System.DateTime.Now;
            user.LastUpdate = timeStamp;
            user.LastUpdatedBy = Convert.ToInt32(currentuser.FindFirst(c => c.Type == "Id").Value);
            user.EmailConfirmed = false;
            var tempPassord = security.GenerateRandomPassword();
            user.Password = security.Hash(tempPassord);
            user.PasswordExpires = DateTime.Now.AddDays(security.TempPasswordExpiresDays()); //TODO: this should be a setting
            user.ConfirmationToken = security.GenerateConfirmationToken();
            user.ConfirmationTokenExpires = DateTime.Now.AddMinutes(security.ConfirmationTokenExpiresMinutes());
            user.ForcePasswordReset = true;
            user.Locked = false;

            _dtoUser dtoUser = new _dtoUser();
            dtoUser = (_dtoUser)_objectMapper.MapObjects(user, dtoUser);

            var resp = userClient.PutUserAsync(user.Id, dtoUser);

            EmailObj email = new EmailObj();
            email.to = user.EmailAddress;

            var securedToken = security.EncryptTokenObject(user.EmailAddress, user.ConfirmationToken);

            email.htmlContent = emailClient.GenerateEmailConfirmationRequest(user.FirstName, tempPassord, securedToken); // get host from settings?
            email.subject = "New Open Trauma Registry Account";
            await emailClient.SendAsync(email);

            Toaster.Add("User Updated!  A new temporary password has been sent to the email specified.", MatToastType.Success, "Success", null, null);

        }
        catch (Exception ex)
        {

            throw;
        }
    }

    protected async Task EditUser(string EmailAddress)
    {
        NavigationManager.NavigateTo("/addedituser/" + EmailAddress);
    }

    protected async Task AddNewUser()
    {
        NavigationManager.NavigateTo("/addedituser");
    }

    async Task SetPage(int page)
    {
        query.PageNumber = page;
        await SearchAsync();
    }

    async Task SetOrderByColumn(string orderBy)
    {
        query.OrderBy = orderBy;

        if (query.OrderByDirection == "asc")
        {
            query.OrderByDirection = "desc";
            sortIcon = "keyboard_arrow_down";
        }
        else
        {
            query.OrderByDirection = "asc";
            sortIcon = "keyboard_arrow_up";
        }
        await SearchAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUser = user.FindFirst(c => c.Type == "EmailAddress").Value;
        await SearchAsync();
    }

}
