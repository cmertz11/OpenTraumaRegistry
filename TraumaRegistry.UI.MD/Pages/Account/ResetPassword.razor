@page "/resetpassword"

@inject NavigationManager NavigationManager
@inject IMatToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IEmailHelper emailClient



<MatCard Style="width: 300px; align-self: center;">
    <div class="logo">
        <img src="" style="width:100px;" /><br />Open Trauma Registry
        <br />
        <h4>Log In</h4>
    </div>
    <EditForm Model="@resetModel" OnValidSubmit="@AuthenticateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@resetModel.CurrentPassword" Label="Current Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@resetModel.NewPassword" Label="New Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@resetModel.ConfirmNewPassword" Label="Confirm New Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>


            <div class="form-group">

                <MatButton class="float-right" Style="padding-right: 20px;" Raised="true">Login</MatButton>
            </div>
            <hr />
            <NavLink href="account/register">
                <h6 class="font-weight-normal text-center">Create account</h6>
            </NavLink>
        </fieldset>
    </EditForm>
    <label>@AuthResponse</label>
</MatCard>

@code {

    [Parameter]
    public string ConfirmationToken { get; set; }
    [Parameter]
    public string email { get; set; }

    LoginClient loginClient = new LoginClient();
    UsersClient userClient = new UsersClient();
    ResetPasswordModel resetModel = new ResetPasswordModel();
    string AuthResponse = "";

    class ResetPasswordModel
    {
        public string Email { get; set; } = "";
        public string CurrentPassword { get; set; } = "";
        public string NewPassword { get; set; } = "";
        public string ConfirmNewPassword { get; set; } = "";
        public string ConfirmationToken { get; set; } = "";
    }

    protected override void OnInitialized()
    {

    }

    protected override async Task OnParametersSetAsync()
    {

        resetModel.Email = email;
        resetModel.ConfirmationToken = ConfirmationToken;
    }

    async Task AuthenticateUser()
    {
        AuthResponse = "";
        try
        {
            var _user = await loginClient.ResetPasswordAsync(resetModel.Email, resetModel.CurrentPassword, resetModel.NewPassword, resetModel.ConfirmationToken);
            if (_user == null)
            {
                AuthResponse = "Invalid Email or Password.";
                return;
            }
            else
            {
                if (_user.Authenticated)
                {

                    await sessionStorage.SetItemAsync("_otrUser", _user);
                    await ((_otrAuthenticationStateProvider)AuthenticationStateProvider).SetUserAsAuthentitcatedAsync();
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    if (!string.IsNullOrEmpty(_user.Message))
                    {
                        AuthResponse = _user.Message;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            AuthResponse = "Invalid Email or Password.";
        }
    }

}