@page "/login"
@inject NavigationManager NavigationManager
@inject IMatToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
 
 

        <MatCard Style="width: 300px; align-self: center;">
            <div class="logo">
                <img src="" style="width:100px;" /><br />Open Trauma Registry
                <br />
                <h4>Log In</h4>

            </div>
            <EditForm Model="@loginModel" OnValidSubmit="@AuthenticateUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@loginModel.Email" Label="Email" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@loginModel.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                    <div class="form-group">
                        @*<MatCheckbox @bind-Checked="@loginParameters.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>*@
                        <MatButton class="float-right" Style="padding-right: 20px;" Raised="true">Login</MatButton> 
                    </div>
                    <hr />
                    <NavLink href="account/register">
                        <h6 class="font-weight-normal text-center">Create account</h6>
                    </NavLink>
                </fieldset>
            </EditForm>
            <label>@AuthResponse</label>
        </MatCard>
 
@code {

    LoginClient loginClient = new LoginClient();
    UsersClient userClient = new UsersClient();
    LoginModel loginModel = new LoginModel();
    string AuthResponse = "";

    class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    protected override void OnInitialized()
    {

    }

    async Task AuthenticateUser()
    {
        AuthResponse = "";
        string token = "";
        try
        {
            token = await loginClient.LoginAsync(loginModel.Email, loginModel.Password);
            if (!string.IsNullOrEmpty(token))
            {
                ((_otrAuthenticationStateProvider)AuthenticationStateProvider).SetUserAsAuthentitcated(loginModel.Email);
                userClient.SetBearerToken(token);
                var _user = await userClient.GetUserAsync(loginModel.Email);
                _user.Token = token;

                await sessionStorage.SetItemAsync("_otrUser", _user); 

                NavigationManager.NavigateTo("/");
                
            }
        }
        catch (Exception ex)
        {
            // Increment Login Attempts??
            AuthResponse = "Invalid Email or Password.";
        }
    }

}