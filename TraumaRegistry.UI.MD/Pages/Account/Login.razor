@page "/login"
@page "/login/{ConfirmationToken}"
@inject NavigationManager NavigationManager
@inject IMatToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IEmailHelper emailClient
@inject ISecurity security


    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogContent>
            @if (!disableForm)
            {
                <MatCard Style="width: 300px; align-self: center;">
                    <div class="logo">
                        <img src="" style="width:100px;" /><br />Open Trauma Registry
                        <br />
                        <h4>Log In</h4>
                    </div>
 
                        <EditForm Model="@loginModel" OnValidSubmit="@AuthenticateUser">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <fieldset>
                                <div class="form-group">
                                    <MatTextField @bind-Value="@loginModel.Email" Label="Email" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                                </div>
                                <div class="form-group">
                                    <MatTextField @bind-Value="@loginModel.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                                </div>
                                <div class="form-group">
                                    <MatButton class="float-right" Style="padding-right: 20px;" Raised="true">Login</MatButton>
                                </div>
                                <hr />
                                <MatProgressBar Indeterminate="@querying"></MatProgressBar>
                            </fieldset>
                        </EditForm> 
                
                </MatCard>
            }
            <p>@AuthResponse</p>
         </MatDialogContent>
    </MatDialog>
    @code {

        [Parameter]
        public string ConfirmationToken { get; set; }
        [Parameter]
        public string Email { get; set; }

        bool dialogIsOpen = false;
        bool querying = false;
        bool disableForm = false;
        LoginClient loginClient = new LoginClient();
        UsersClient userClient = new UsersClient();
        TokenObject tokenObject = new TokenObject();
        LoginModel loginModel = new LoginModel();

        class LoginModel
        {
            public string Email { get; set; }
            public string Password { get; set; }
        }

        string AuthResponse = "";

        protected override async Task OnParametersSetAsync()
        {
            dialogIsOpen = false;
            if (!string.IsNullOrEmpty(ConfirmationToken))
            {
                tokenObject = security.DecryptTokenObject(ConfirmationToken);

                var response = await loginClient.PostConfirmEmailAsync(ConfirmationToken);

                if (response.Success)// response should return object with bool success message
                {
                    loginModel.Email = tokenObject.EmailAddress;
                    AuthResponse = $"Email {tokenObject.EmailAddress} has been confirmed.  Please login.";

                }
                else
                {
                    loginModel.Email = "";
                    loginModel.Password = "";
                    disableForm = true;
                    foreach (var item in response.Messages)
                    {
                        AuthResponse += item + " ";
                    }
                }
            }
            dialogIsOpen = true;
        }

        protected override async Task OnInitializedAsync()
        {
            dialogIsOpen = true;
        }

        async Task AuthenticateUser()
        {
            querying = true;
            AuthResponse = "";
            try
            {
                if (string.IsNullOrEmpty(ConfirmationToken))
                {
                    ConfirmationToken = "NONE";
                }
                var _user = await loginClient.LoginAsync(loginModel.Email, loginModel.Password, ConfirmationToken);
                querying = false;
                if (_user == null)
                {
                    AuthResponse = "Invalid Email or Password.";
                    return;
                }
                else
                {
                    if (!string.IsNullOrEmpty(_user.JsonToken))
                    {

                        userClient.SetBearerToken(_user.JsonToken);

                        if (_user.Authenticated)
                        {
                            await sessionStorage.SetItemAsync("_otrUser", _user);
                            await ((_otrAuthenticationStateProvider)AuthenticationStateProvider).SetUserAsAuthentitcatedAsync();
                            NavigationManager.NavigateTo("/");

                        }
                        else if (_user.ForcePasswordReset && _user.EmailConfirmed)
                        {
                            NavigationManager.NavigateTo("/resetpassword/" + _user.ConfirmationToken); //TODO: create resetpassword page
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(ConfirmationToken))
                        {
                            if (ConfirmationToken == _user.ConfirmationToken)
                            {
                                // set user email confirmed to true
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Increment Login Attempts??
                AuthResponse = "Invalid Email or Password.";
            }
        }

    }
