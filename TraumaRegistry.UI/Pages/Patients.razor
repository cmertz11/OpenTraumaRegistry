@page "/patients"

@using System.Diagnostics
@using System.Threading
@inject NavigationManager NavigationManager


<h2><i class="fas fa-user-injured"></i>Patients</h2>

<p></p>

@if (pagedData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form class="form-inline">

        <label for="filterColumn">Filter Column</label>
        <select class="form-control" style="width: 200px" id="filterColumn" @bind="query.FilterColumn">
            <option selected="selected" value="Id">Id</option>
            <option value="FirstName">First Name</option>
            <option value="LastName">Last Name</option>
            <option value="MI">MI</option>
        </select>

        <label for="searchFilter">Search Filter</label>
        <input class="form-control" id="searchFilter" type="text" @bind="query.Filter" />
        <button type="button" class="btn btn-primary" @onclick="SearchAsync">Search <i class="fas fa-search"></i></button>

        <label for="pageSizeSelect">Page Size</label>
        <select class="form-control" style="width: 80px" id="pageSizeSelect" @bind="query.PageSize">
            <option value="5">5</option>
            <option selected="selected" value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
        </select>

    </form>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>
                    Id
                    <button class="btn" @onclick="@(() => SetOrderByColumn("Id"))"><i class="@sortIcon"></i></button>

                </th>
                <th>
                    First Name
                    <button class="btn" @onclick="@(() => SetOrderByColumn("FirstName"))"><i class="@sortIcon"></i></button>
                </th>
                <th>
                    Last Name
                    <button class="btn" @onclick="@(() => SetOrderByColumn("LastName"))"><i class="@sortIcon"></i></button>

                </th>
                <th>
                    MI
                    <button class="btn" @onclick="@(() => SetOrderByColumn("MI"))"><i class="@sortIcon"></i></button>
                </th>
                <th>
                    DOB
                    <button class="btn" @onclick="@(() => SetOrderByColumn("DOB"))"><i class="@sortIcon"></i></button>
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patient in pagedData.Records)
            {
                <tr>
                    <td>@patient.Id</td>
                    <td>@patient.FirstName</td>
                    <td>@patient.LastName</td>
                    <td>@patient.Mi</td>
                    <td>@patient.Dob.ToString("MM/dd/yyyy")</td>
                    <td><button class="btn btn-primary btn-sm" @onclick="@(() => ViewRecord(patient.Id))">View <i class="fas fa-info"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
    @if (pageCount > 1)
    {
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                @{
                    string previousButtonClass = query.PageNumber == 1 ? "page-item disabled" : "page-item";
                    string nextButtonClass = query.PageNumber == pageCount ? "page-item disabled" : "page-item";

                }
                <li class="@previousButtonClass"><a class="page-link" @onclick="@(() => SetPage(Convert.ToInt32(query.PageNumber) - 1))">Previous</a></li>

                @for (int i = 1; i < pageCount + 1; i++)
                {
                    var local_i = i;
                    string pageItemClass = query.PageNumber == i ? "page-item active" : "page-item";
                    <li class="@pageItemClass"><a class="page-link" @onclick="@(() => SetPage(local_i))"> @i</a></li>
                }
                <li class="@nextButtonClass"><a class="page-link" @onclick="@(() => SetPage(Convert.ToInt32(query.PageNumber) + 1))">Next</a></li>
            </ul>
        </nav>
    }
    <label>@metrics</label>
}

@code {

    PagedData pagedData;
    PatientsPagedClient client = new PatientsPagedClient();
    string sortIcon = "fa fa-sort-up";
    string metrics = "";
    int pageCount = 0;

    UrlQuery query = new UrlQuery { PageNumber = 1, PageSize = 10, FilterColumn = "Patients.LastName", OrderBy = "Id", OrderByDirection = "asc" };

    protected async Task SearchAsync()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        pagedData = await client.GetPatientsAsync(query);
        pageCount = (pagedData.RecordCount + query.PageSize - 1) / query.PageSize;
        sw.Stop();
        metrics = "Total Patients: " + pagedData.RecordCount + "." + Environment.NewLine + "Data returned in " + sw.ElapsedMilliseconds.ToString() + " Milliseconds";
    } 

    protected async Task ViewRecord(int Id)
    {
        NavigationManager.NavigateTo("/events/" + Id);
    }

    async Task SetPage(int page)
    {
        query.PageNumber = page;
        await SearchAsync();
    }

    async Task SetOrderByColumn(string orderBy)
    {
        query.OrderBy = orderBy;

        if (query.OrderByDirection == "asc")
        {
            query.OrderByDirection = "desc";
            sortIcon = "fa fa-sort-down";
        }
        else
        {
            query.OrderByDirection = "asc";
            sortIcon = "fa fa-sort-up";
        }
        await SearchAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await SearchAsync();
    }


}
