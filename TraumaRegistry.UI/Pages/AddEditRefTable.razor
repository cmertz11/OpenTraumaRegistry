@inject IModalService ModalService

 
    <form>
    @if (mode != "delete")
    {
        @if (mode == "edit")
        {
            <div class="form-group">
                <label for="txtId">Id</label>
                <input type="text"  id="txtId" class="form-control" @bind=@Id />
            </div> 
        }
        <div class="form-group">
            <label for="txtCode">Code</label>
            <input type="text" id="txtCode" class="form-control" @bind=@Code />
        </div>
        <div class="form-group">
            <label for="txtDescription">Description</label>
            <input type="text" id="txtDescription" class="form-control" @bind=@Description />
        </div>

        <button @onclick="@SaveRecord" class="btn btn-primary">Save</button>
    }
    else
    {
        <h3>Are you sure you want to delete record @Id?</h3>
        <br />
        <button @onclick="@DeleteRecord" class="btn btn-primary">Delete</button>
    }
        <button @onclick="@Cancel" class="btn btn-secondary">Cancel</button>
        
    </form>

 
 

@code {

    [CascadingParameter] ModalParameters Parameters { get; set; }

    ReferenceTableClient client = new ReferenceTableClient();

    public string tableName { get; set; }
    string mode { get; set; }
    int Id { get; set; }
    string Code { get; set; }
    string Description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        mode = Parameters.Get<string>("mode");
        tableName = Parameters.Get<string>("tableName");

        if (mode=="edit" || mode == "delete")
        {
            Id = Parameters.Get<int>("Id");
            Code = Parameters.Get<string>("Code");
            Description = Parameters.Get<string>("Description");
        }
    }

    void SaveRecord()
    {
        if(mode=="edit")
        {
            var result = client.EditRefTableRecordAsync(tableName, new RefTable { Id = Id, Code = Code, Description = Description });
        }
        else if (mode == "add")
        {
            var result = client.AddRefTableRecordAsync(tableName, new RefTable { Code = Code, Description = Description });
        }  
    }

    void DeleteRecord()
    {
         var result = client.DeleteRefTableRecordAsync(tableName, Id);
    }

    void Cancel()
    {

    }
}
